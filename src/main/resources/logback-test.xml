<?xml version="1.0" encoding="UTF-8"?>
<!-- flume -->
<configuration>

    <appender name="consoleAppender"
              class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyy MMM dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%L- %msg%n
            </pattern>
        </encoder>
    </appender>

    <appender name="fileAppender"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- Output the log file to: the log folder under the directory where the project is started (there is no automatic creation) -->
        <file>log/logFile.log</file>
        <!-- Output the log file to: where the name is specified by the property tag of logFilePositionDir -->
        <!-- <file>${logFilePositionDir}/logFile.log</file> -->
        <!-- Output the log file to: the current folder under the log folder (no automatic creation) -->
        <!-- <file>/log/logFile.log</file> -->
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- TimeBasedRollingPolicy policy will save the obsolete log to the specified file (created without this file) -->
            <!-- Save the files that have been split because they are outdated or too large, and save them to the log folder under the directory where you want to start -->
            <fileNamePattern>log/logFile.%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <!-- Set the obsolete time (unit: the smallest time unit in %d in the <fileNamePattern> tag) -->
            <!-- The system will delete (separated) outdated log files -->
            <!-- I am here: save the log file based on the last log, within 7 days before -->
            <MaxHistory>
                7
            </MaxHistory>
            <!-- Scrolling strategies can be nested;
                              There is a SizeAndTimeBasedFNATP policy nested here.
                                    The main purpose is: on the premise that the log will be split every day,
                                    When the log of the day is larger than the specified size,
                                    Also split and distinguish by [%i], i starts from 0
-->
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyy MMM dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}:%L- %msg%n
            </pattern>
        </encoder>
    </appender>

    <appender name="flumeTest" class="com.teambytes.logback.flume.FlumeLogstashV1Appender">
        <flumeAgents>
            localhost:44446
        </flumeAgents>
        <flumeProperties>
            connect-timeout=4000;
            request-timeout=8000
        </flumeProperties>
        <batchSize>100</batchSize>
        <reportingWindow>1000</reportingWindow>
        <additionalAvroHeaders>
            myHeader = myValue
        </additionalAvroHeaders>
        <application>JustryDeng's Application</application>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm:ss.SSS} %-5level %logger{36} - \(%file:%line\) - %message%n%ex</pattern>
        </layout>
    </appender>

    <logger name="com" level="info">
        <appender-ref ref="flumeTest"/>
    </logger>

    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>



</configuration>
